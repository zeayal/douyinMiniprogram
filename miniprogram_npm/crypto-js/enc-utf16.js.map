{"version":3,"file":"node_modules/crypto-js/enc-utf16.js","names":["root","factory","exports","module","require","define","amd","CryptoJS","this","C","WordArray","lib","C_enc","enc","Utf16","Utf16BE","stringify","wordArray","words","sigBytes","utf16Chars","i","codePoint","push","String","fromCharCode","join","parse","utf16Str","utf16StrLength","length","charCodeAt","create","swapEndian","word","Utf16LE"],"sources":["node_modules/crypto-js/enc-utf16.js"],"sourcesContent":[";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * UTF-16 BE encoding strategy.\n\t     */\n\t    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {\n\t        /**\n\t         * Converts a word array to a UTF-16 BE string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-16 BE string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var utf16Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 2) {\n\t                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;\n\t                utf16Chars.push(String.fromCharCode(codePoint));\n\t            }\n\n\t            return utf16Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a UTF-16 BE string to a word array.\n\t         *\n\t         * @param {string} utf16Str The UTF-16 BE string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);\n\t         */\n\t        parse: function (utf16Str) {\n\t            // Shortcut\n\t            var utf16StrLength = utf16Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < utf16StrLength; i++) {\n\t                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);\n\t            }\n\n\t            return WordArray.create(words, utf16StrLength * 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-16 LE encoding strategy.\n\t     */\n\t    C_enc.Utf16LE = {\n\t        /**\n\t         * Converts a word array to a UTF-16 LE string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-16 LE string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var utf16Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 2) {\n\t                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);\n\t                utf16Chars.push(String.fromCharCode(codePoint));\n\t            }\n\n\t            return utf16Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a UTF-16 LE string to a word array.\n\t         *\n\t         * @param {string} utf16Str The UTF-16 LE string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);\n\t         */\n\t        parse: function (utf16Str) {\n\t            // Shortcut\n\t            var utf16StrLength = utf16Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < utf16StrLength; i++) {\n\t                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));\n\t            }\n\n\t            return WordArray.create(words, utf16StrLength * 2);\n\t        }\n\t    };\n\n\t    function swapEndian(word) {\n\t        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);\n\t    }\n\t}());\n\n\n\treturn CryptoJS.enc.Utf16;\n\n}));"],"mappings":"CAAE,SAAUA,EAAMC,GACM,iBAAZC,QAEVC,OAAOD,QAAUA,QAAUD,EAAQG,QAAQ,WAEjB,mBAAXC,QAAyBA,OAAOC,IAE/CD,OAAO,CAAC,UAAWJ,GAInBA,EAAQD,EAAKO,SAEf,CAbC,CAaCC,MAAM,SAAUD,GAqIjB,OAnIC,WAEG,IAAIE,EAAIF,EAEJG,EADQD,EAAEE,IACQD,UAClBE,EAAQH,EAAEI,IAKAD,EAAME,MAAQF,EAAMG,QAAU,CAcxCC,UAAW,SAAUC,GAOjB,IALA,IAAIC,EAAQD,EAAUC,MAClBC,EAAWF,EAAUE,SAGrBC,EAAa,GACRC,EAAI,EAAGA,EAAIF,EAAUE,GAAK,EAAG,CAClC,IAAIC,EAAaJ,EAAMG,IAAM,KAAQ,GAAMA,EAAI,EAAK,EAAM,MAC1DD,EAAWG,KAAKC,OAAOC,aAAaH,GACxC,CAEA,OAAOF,EAAWM,KAAK,GAC3B,EAeAC,MAAO,SAAUC,GAMb,IAJA,IAAIC,EAAiBD,EAASE,OAG1BZ,EAAQ,GACHG,EAAI,EAAGA,EAAIQ,EAAgBR,IAChCH,EAAMG,IAAM,IAAMO,EAASG,WAAWV,IAAO,GAAMA,EAAI,EAAK,GAGhE,OAAOX,EAAUsB,OAAOd,EAAwB,EAAjBW,EACnC,GA8DJ,SAASI,EAAWC,GAChB,OAASA,GAAQ,EAAK,WAAgBA,IAAS,EAAK,QACxD,CA1DAtB,EAAMuB,QAAU,CAcZnB,UAAW,SAAUC,GAOjB,IALA,IAAIC,EAAQD,EAAUC,MAClBC,EAAWF,EAAUE,SAGrBC,EAAa,GACRC,EAAI,EAAGA,EAAIF,EAAUE,GAAK,EAAG,CAClC,IAAIC,EAAYW,EAAYf,EAAMG,IAAM,KAAQ,GAAMA,EAAI,EAAK,EAAM,OACrED,EAAWG,KAAKC,OAAOC,aAAaH,GACxC,CAEA,OAAOF,EAAWM,KAAK,GAC3B,EAeAC,MAAO,SAAUC,GAMb,IAJA,IAAIC,EAAiBD,EAASE,OAG1BZ,EAAQ,GACHG,EAAI,EAAGA,EAAIQ,EAAgBR,IAChCH,EAAMG,IAAM,IAAMY,EAAWL,EAASG,WAAWV,IAAO,GAAMA,EAAI,EAAK,IAG3E,OAAOX,EAAUsB,OAAOd,EAAwB,EAAjBW,EACnC,EAMR,CAhIA,GAmIOtB,EAASM,IAAIC,KAErB","ignoreList":[]}