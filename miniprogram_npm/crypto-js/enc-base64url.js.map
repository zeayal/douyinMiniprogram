{"version":3,"file":"node_modules/crypto-js/enc-base64url.js","names":["root","factory","exports","module","require","define","amd","CryptoJS","this","C","WordArray","lib","enc","Base64url","stringify","wordArray","urlSafe","undefined","words","sigBytes","map","_safe_map","_map","clamp","base64Chars","i","triplet","j","push","charAt","paddingChar","length","join","parse","base64Str","base64StrLength","reverseMap","_reverseMap","charCodeAt","paddingIndex","indexOf","nBytes","bitsCombined","create","parseLoop"],"sources":["node_modules/crypto-js/enc-base64url.js"],"sourcesContent":[";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * Base64url encoding strategy.\n\t     */\n\t    var Base64url = C_enc.Base64url = {\n\t        /**\n\t         * Converts a word array to a Base64url string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @param {boolean} urlSafe Whether to use url safe\n\t         *\n\t         * @return {string} The Base64url string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var base64String = CryptoJS.enc.Base64url.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray, urlSafe) {\n\t            if (urlSafe === undefined) {\n\t                urlSafe = true\n\t            }\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\t            var map = urlSafe ? this._safe_map : this._map;\n\n\t            // Clamp excess bits\n\t            wordArray.clamp();\n\n\t            // Convert\n\t            var base64Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 3) {\n\t                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n\t                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n\t                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n\t                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n\t                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n\t                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n\t                }\n\t            }\n\n\t            // Add padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                while (base64Chars.length % 4) {\n\t                    base64Chars.push(paddingChar);\n\t                }\n\t            }\n\n\t            return base64Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Base64url string to a word array.\n\t         *\n\t         * @param {string} base64Str The Base64url string.\n\t         *\n\t         * @param {boolean} urlSafe Whether to use url safe\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Base64url.parse(base64String);\n\t         */\n\t        parse: function (base64Str, urlSafe) {\n\t            if (urlSafe === undefined) {\n\t                urlSafe = true\n\t            }\n\n\t            // Shortcuts\n\t            var base64StrLength = base64Str.length;\n\t            var map = urlSafe ? this._safe_map : this._map;\n\t            var reverseMap = this._reverseMap;\n\n\t            if (!reverseMap) {\n\t                reverseMap = this._reverseMap = [];\n\t                for (var j = 0; j < map.length; j++) {\n\t                    reverseMap[map.charCodeAt(j)] = j;\n\t                }\n\t            }\n\n\t            // Ignore padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                var paddingIndex = base64Str.indexOf(paddingChar);\n\t                if (paddingIndex !== -1) {\n\t                    base64StrLength = paddingIndex;\n\t                }\n\t            }\n\n\t            // Convert\n\t            return parseLoop(base64Str, base64StrLength, reverseMap);\n\n\t        },\n\n\t        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n\t        _safe_map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n\t    };\n\n\t    function parseLoop(base64Str, base64StrLength, reverseMap) {\n\t        var words = [];\n\t        var nBytes = 0;\n\t        for (var i = 0; i < base64StrLength; i++) {\n\t            if (i % 4) {\n\t                var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\n\t                var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\n\t                var bitsCombined = bits1 | bits2;\n\t                words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);\n\t                nBytes++;\n\t            }\n\t        }\n\t        return WordArray.create(words, nBytes);\n\t    }\n\t}());\n\n\n\treturn CryptoJS.enc.Base64url;\n\n}));"],"mappings":"CAAE,SAAUA,EAAMC,GACM,iBAAZC,QAEVC,OAAOD,QAAUA,QAAUD,EAAQG,QAAQ,WAEjB,mBAAXC,QAAyBA,OAAOC,IAE/CD,OAAO,CAAC,UAAWJ,GAInBA,EAAQD,EAAKO,SAEf,CAbC,CAaCC,MAAM,SAAUD,GAEhB,IAEOE,EAEAC,EA8HR,OA9HQA,GAFAD,EAAIF,GACMI,IACQD,UACVD,EAAEG,IAKQC,UAAY,CAgB9BC,UAAW,SAAUC,EAAWC,QACZC,IAAZD,IACAA,GAAU,GAGd,IAAIE,EAAQH,EAAUG,MAClBC,EAAWJ,EAAUI,SACrBC,EAAMJ,EAAUR,KAAKa,UAAYb,KAAKc,KAG1CP,EAAUQ,QAIV,IADA,IAAIC,EAAc,GACTC,EAAI,EAAGA,EAAIN,EAAUM,GAAK,EAO/B,IANA,IAIIC,GAJSR,EAAMO,IAAM,KAAc,GAAMA,EAAI,EAAK,EAAY,MAI1C,IAHXP,EAAOO,EAAI,IAAO,KAAQ,IAAOA,EAAI,GAAK,EAAK,EAAM,MAG1B,EAF3BP,EAAOO,EAAI,IAAO,KAAQ,IAAOA,EAAI,GAAK,EAAK,EAAM,IAIzDE,EAAI,EAAIA,EAAI,GAAOF,EAAQ,IAAJE,EAAWR,EAAWQ,IAClDH,EAAYI,KAAKR,EAAIS,OAAQH,IAAa,GAAK,EAAIC,GAAO,KAKlE,IAAIG,EAAcV,EAAIS,OAAO,IAC7B,GAAIC,EACA,KAAON,EAAYO,OAAS,GACxBP,EAAYI,KAAKE,GAIzB,OAAON,EAAYQ,KAAK,GAC5B,EAiBAC,MAAO,SAAUC,EAAWlB,QACRC,IAAZD,IACAA,GAAU,GAId,IAAImB,EAAkBD,EAAUH,OAC5BX,EAAMJ,EAAUR,KAAKa,UAAYb,KAAKc,KACtCc,EAAa5B,KAAK6B,YAEtB,IAAKD,EAAY,CACbA,EAAa5B,KAAK6B,YAAc,GAChC,IAAK,IAAIV,EAAI,EAAGA,EAAIP,EAAIW,OAAQJ,IAC5BS,EAAWhB,EAAIkB,WAAWX,IAAMA,CAExC,CAGA,IAAIG,EAAcV,EAAIS,OAAO,IAC7B,GAAIC,EAAa,CACb,IAAIS,EAAeL,EAAUM,QAAQV,IACf,IAAlBS,IACAJ,EAAkBI,EAE1B,CAGA,OAQR,SAAmBL,EAAWC,EAAiBC,GAG3C,IAFA,IAAIlB,EAAQ,GACRuB,EAAS,EACJhB,EAAI,EAAGA,EAAIU,EAAiBV,IACjC,GAAIA,EAAI,EAAG,CACP,IAEIiB,EAFQN,EAAWF,EAAUI,WAAWb,EAAI,KAASA,EAAI,EAAK,EACtDW,EAAWF,EAAUI,WAAWb,MAAS,EAAKA,EAAI,EAAK,EAEnEP,EAAMuB,IAAW,IAAMC,GAAiB,GAAMD,EAAS,EAAK,EAC5DA,GACJ,CAEJ,OAAO/B,EAAUiC,OAAOzB,EAAOuB,EACnC,CArBeG,CAAUV,EAAWC,EAAiBC,EAEjD,EAEAd,KAAM,oEACND,UAAW,oEAoBZd,EAASK,IAAIC,SAErB","ignoreList":[]}