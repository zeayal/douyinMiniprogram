{"version":3,"file":"node_modules/crypto-js/pbkdf2.js","names":["root","factory","undef","exports","module","require","define","amd","CryptoJS","this","C","C_lib","Base","WordArray","C_algo","SHA256","HMAC","PBKDF2","lib","algo","extend","cfg","keySize","hasher","iterations","init","compute","password","salt","hmac","create","derivedKey","blockIndex","derivedKeyWords","words","blockIndexWords","length","block","update","finalize","reset","blockWords","blockWordsLength","intermediate","i","intermediateWords","j","concat","sigBytes"],"sources":["node_modules/crypto-js/pbkdf2.js"],"sourcesContent":[";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha256\"), require(\"./hmac\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha256\", \"./hmac\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var SHA256 = C_algo.SHA256;\n\t    var HMAC = C_algo.HMAC;\n\n\t    /**\n\t     * Password-Based Key Derivation Function 2 algorithm.\n\t     */\n\t    var PBKDF2 = C_algo.PBKDF2 = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n\t         * @property {Hasher} hasher The hasher to use. Default: SHA256\n\t         * @property {number} iterations The number of iterations to perform. Default: 250000\n\t         */\n\t        cfg: Base.extend({\n\t            keySize: 128/32,\n\t            hasher: SHA256,\n\t            iterations: 250000\n\t        }),\n\n\t        /**\n\t         * Initializes a newly created key derivation function.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create();\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });\n\t         */\n\t        init: function (cfg) {\n\t            this.cfg = this.cfg.extend(cfg);\n\t        },\n\n\t        /**\n\t         * Computes the Password-Based Key Derivation Function 2.\n\t         *\n\t         * @param {WordArray|string} password The password.\n\t         * @param {WordArray|string} salt A salt.\n\t         *\n\t         * @return {WordArray} The derived key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var key = kdf.compute(password, salt);\n\t         */\n\t        compute: function (password, salt) {\n\t            // Shortcut\n\t            var cfg = this.cfg;\n\n\t            // Init HMAC\n\t            var hmac = HMAC.create(cfg.hasher, password);\n\n\t            // Initial values\n\t            var derivedKey = WordArray.create();\n\t            var blockIndex = WordArray.create([0x00000001]);\n\n\t            // Shortcuts\n\t            var derivedKeyWords = derivedKey.words;\n\t            var blockIndexWords = blockIndex.words;\n\t            var keySize = cfg.keySize;\n\t            var iterations = cfg.iterations;\n\n\t            // Generate key\n\t            while (derivedKeyWords.length < keySize) {\n\t                var block = hmac.update(salt).finalize(blockIndex);\n\t                hmac.reset();\n\n\t                // Shortcuts\n\t                var blockWords = block.words;\n\t                var blockWordsLength = blockWords.length;\n\n\t                // Iterations\n\t                var intermediate = block;\n\t                for (var i = 1; i < iterations; i++) {\n\t                    intermediate = hmac.finalize(intermediate);\n\t                    hmac.reset();\n\n\t                    // Shortcut\n\t                    var intermediateWords = intermediate.words;\n\n\t                    // XOR intermediate with block\n\t                    for (var j = 0; j < blockWordsLength; j++) {\n\t                        blockWords[j] ^= intermediateWords[j];\n\t                    }\n\t                }\n\n\t                derivedKey.concat(block);\n\t                blockIndexWords[0]++;\n\t            }\n\t            derivedKey.sigBytes = keySize * 4;\n\n\t            return derivedKey;\n\t        }\n\t    });\n\n\t    /**\n\t     * Computes the Password-Based Key Derivation Function 2.\n\t     *\n\t     * @param {WordArray|string} password The password.\n\t     * @param {WordArray|string} salt A salt.\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n\t     *\n\t     * @return {WordArray} The derived key.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var key = CryptoJS.PBKDF2(password, salt);\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });\n\t     */\n\t    C.PBKDF2 = function (password, salt, cfg) {\n\t        return PBKDF2.create(cfg).compute(password, salt);\n\t    };\n\t}());\n\n\n\treturn CryptoJS.PBKDF2;\n\n}));"],"mappings":"CAAE,SAAUA,EAAMC,EAASC,GACH,iBAAZC,QAEVC,OAAOD,QAAUA,QAAUF,EAAQI,QAAQ,UAAWA,QAAQ,YAAaA,QAAQ,WAEzD,mBAAXC,QAAyBA,OAAOC,IAE/CD,OAAO,CAAC,SAAU,WAAY,UAAWL,GAIzCA,EAAQD,EAAKQ,SAEf,CAbC,CAaCC,MAAM,SAAUD,GAEhB,IAEOE,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAKAC,EAkHR,OA5HQN,GADAD,EAAIF,GACMU,IACVN,EAAOD,EAAMC,KACbC,EAAYF,EAAME,UAClBC,EAASJ,EAAES,KACXJ,EAASD,EAAOC,OAChBC,EAAOF,EAAOE,KAKdC,EAASH,EAAOG,OAASL,EAAKQ,OAAO,CAQrCC,IAAKT,EAAKQ,OAAO,CACbE,QAAS,EACTC,OAAQR,EACRS,WAAY,OAchBC,KAAM,SAAUJ,GACZZ,KAAKY,IAAMZ,KAAKY,IAAID,OAAOC,EAC/B,EAcAK,QAAS,SAAUC,EAAUC,GAkBzB,IAhBA,IAAIP,EAAMZ,KAAKY,IAGXQ,EAAOb,EAAKc,OAAOT,EAAIE,OAAQI,GAG/BI,EAAalB,EAAUiB,SACvBE,EAAanB,EAAUiB,OAAO,CAAC,IAG/BG,EAAkBF,EAAWG,MAC7BC,EAAkBH,EAAWE,MAC7BZ,EAAUD,EAAIC,QACdE,EAAaH,EAAIG,WAGdS,EAAgBG,OAASd,GAAS,CACrC,IAAIe,EAAQR,EAAKS,OAAOV,GAAMW,SAASP,GACvCH,EAAKW,QAQL,IALA,IAAIC,EAAaJ,EAAMH,MACnBQ,EAAmBD,EAAWL,OAG9BO,EAAeN,EACVO,EAAI,EAAGA,EAAIpB,EAAYoB,IAAK,CACjCD,EAAed,EAAKU,SAASI,GAC7Bd,EAAKW,QAML,IAHA,IAAIK,EAAoBF,EAAaT,MAG5BY,EAAI,EAAGA,EAAIJ,EAAkBI,IAClCL,EAAWK,IAAMD,EAAkBC,EAE3C,CAEAf,EAAWgB,OAAOV,GAClBF,EAAgB,IACpB,CAGA,OAFAJ,EAAWiB,SAAqB,EAAV1B,EAEfS,CACX,IAoBJrB,EAAEO,OAAS,SAAUU,EAAUC,EAAMP,GACjC,OAAOJ,EAAOa,OAAOT,GAAKK,QAAQC,EAAUC,EAChD,EAIGpB,EAASS,MAEjB","ignoreList":[]}