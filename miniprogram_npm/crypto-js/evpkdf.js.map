{"version":3,"file":"node_modules/crypto-js/evpkdf.js","names":["root","factory","undef","exports","module","require","define","amd","CryptoJS","this","C","C_lib","Base","WordArray","C_algo","MD5","EvpKDF","lib","algo","extend","cfg","keySize","hasher","iterations","init","compute","password","salt","block","create","derivedKey","derivedKeyWords","words","length","update","finalize","reset","i","concat","sigBytes"],"sources":["node_modules/crypto-js/evpkdf.js"],"sourcesContent":[";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha1\"), require(\"./hmac\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha1\", \"./hmac\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var MD5 = C_algo.MD5;\n\n\t    /**\n\t     * This key derivation function is meant to conform with EVP_BytesToKey.\n\t     * www.openssl.org/docs/crypto/EVP_BytesToKey.html\n\t     */\n\t    var EvpKDF = C_algo.EvpKDF = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n\t         * @property {Hasher} hasher The hash algorithm to use. Default: MD5\n\t         * @property {number} iterations The number of iterations to perform. Default: 1\n\t         */\n\t        cfg: Base.extend({\n\t            keySize: 128/32,\n\t            hasher: MD5,\n\t            iterations: 1\n\t        }),\n\n\t        /**\n\t         * Initializes a newly created key derivation function.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create();\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });\n\t         */\n\t        init: function (cfg) {\n\t            this.cfg = this.cfg.extend(cfg);\n\t        },\n\n\t        /**\n\t         * Derives a key from a password.\n\t         *\n\t         * @param {WordArray|string} password The password.\n\t         * @param {WordArray|string} salt A salt.\n\t         *\n\t         * @return {WordArray} The derived key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var key = kdf.compute(password, salt);\n\t         */\n\t        compute: function (password, salt) {\n\t            var block;\n\n\t            // Shortcut\n\t            var cfg = this.cfg;\n\n\t            // Init hasher\n\t            var hasher = cfg.hasher.create();\n\n\t            // Initial values\n\t            var derivedKey = WordArray.create();\n\n\t            // Shortcuts\n\t            var derivedKeyWords = derivedKey.words;\n\t            var keySize = cfg.keySize;\n\t            var iterations = cfg.iterations;\n\n\t            // Generate key\n\t            while (derivedKeyWords.length < keySize) {\n\t                if (block) {\n\t                    hasher.update(block);\n\t                }\n\t                block = hasher.update(password).finalize(salt);\n\t                hasher.reset();\n\n\t                // Iterations\n\t                for (var i = 1; i < iterations; i++) {\n\t                    block = hasher.finalize(block);\n\t                    hasher.reset();\n\t                }\n\n\t                derivedKey.concat(block);\n\t            }\n\t            derivedKey.sigBytes = keySize * 4;\n\n\t            return derivedKey;\n\t        }\n\t    });\n\n\t    /**\n\t     * Derives a key from a password.\n\t     *\n\t     * @param {WordArray|string} password The password.\n\t     * @param {WordArray|string} salt A salt.\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n\t     *\n\t     * @return {WordArray} The derived key.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var key = CryptoJS.EvpKDF(password, salt);\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\n\t     */\n\t    C.EvpKDF = function (password, salt, cfg) {\n\t        return EvpKDF.create(cfg).compute(password, salt);\n\t    };\n\t}());\n\n\n\treturn CryptoJS.EvpKDF;\n\n}));"],"mappings":"CAAE,SAAUA,EAAMC,EAASC,GACH,iBAAZC,QAEVC,OAAOD,QAAUA,QAAUF,EAAQI,QAAQ,UAAWA,QAAQ,UAAWA,QAAQ,WAEvD,mBAAXC,QAAyBA,OAAOC,IAE/CD,OAAO,CAAC,SAAU,SAAU,UAAWL,GAIvCA,EAAQD,EAAKQ,SAEf,CAbC,CAaCC,MAAM,SAAUD,GAEhB,IAEOE,EACAC,EACAC,EACAC,EACAC,EACAC,EAMAC,EAuGR,OAjHQL,GADAD,EAAIF,GACMS,IACVL,EAAOD,EAAMC,KACbC,EAAYF,EAAME,UAClBC,EAASJ,EAAEQ,KACXH,EAAMD,EAAOC,IAMbC,EAASF,EAAOE,OAASJ,EAAKO,OAAO,CAQrCC,IAAKR,EAAKO,OAAO,CACbE,QAAS,EACTC,OAAQP,EACRQ,WAAY,IAchBC,KAAM,SAAUJ,GACZX,KAAKW,IAAMX,KAAKW,IAAID,OAAOC,EAC/B,EAcAK,QAAS,SAAUC,EAAUC,GAkBzB,IAjBA,IAAIC,EAGAR,EAAMX,KAAKW,IAGXE,EAASF,EAAIE,OAAOO,SAGpBC,EAAajB,EAAUgB,SAGvBE,EAAkBD,EAAWE,MAC7BX,EAAUD,EAAIC,QACdE,EAAaH,EAAIG,WAGdQ,EAAgBE,OAASZ,GAAS,CACjCO,GACAN,EAAOY,OAAON,GAElBA,EAAQN,EAAOY,OAAOR,GAAUS,SAASR,GACzCL,EAAOc,QAGP,IAAK,IAAIC,EAAI,EAAGA,EAAId,EAAYc,IAC5BT,EAAQN,EAAOa,SAASP,GACxBN,EAAOc,QAGXN,EAAWQ,OAAOV,EACtB,CAGA,OAFAE,EAAWS,SAAqB,EAAVlB,EAEfS,CACX,IAoBJpB,EAAEM,OAAS,SAAUU,EAAUC,EAAMP,GACjC,OAAOJ,EAAOa,OAAOT,GAAKK,QAAQC,EAAUC,EAChD,EAIGnB,EAASQ,MAEjB","ignoreList":[]}