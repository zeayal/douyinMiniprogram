{"version":3,"file":"node_modules/pako/lib/zlib/trees.js","names":["Z_FIXED","Z_BINARY","Z_TEXT","Z_UNKNOWN","zero","buf","len","length","STORED_BLOCK","STATIC_TREES","DYN_TREES","MIN_MATCH","MAX_MATCH","LENGTH_CODES","LITERALS","L_CODES","D_CODES","BL_CODES","HEAP_SIZE","MAX_BITS","Buf_size","MAX_BL_BITS","END_BLOCK","REP_3_6","REPZ_3_10","REPZ_11_138","extra_lbits","Uint8Array","extra_dbits","extra_blbits","bl_order","DIST_CODE_LEN","static_ltree","Array","static_dtree","_dist_code","_length_code","base_length","base_dist","StaticTreeDesc","static_tree","extra_bits","extra_base","elems","max_length","this","has_stree","static_l_desc","static_d_desc","static_bl_desc","TreeDesc","dyn_tree","stat_desc","max_code","d_code","dist","put_short","s","w","pending_buf","pending","send_bits","value","bi_valid","bi_buf","send_code","c","tree","bi_reverse","code","res","bi_flush","gen_bitlen","desc","stree","extra","base","h","n","m","bits","xbits","f","overflow","bl_count","heap","heap_max","opt_len","static_len","gen_codes","next_code","tr_static_init","init_block","dyn_ltree","dyn_dtree","bl_tree","sym_next","matches","bi_windup","smaller","depth","_n2","_m2","pqdownheap","k","v","j","heap_len","compress_block","ltree","dtree","lc","sx","sym_buf","build_tree","node","scan_tree","curlen","prevlen","nextlen","count","max_count","min_count","send_tree","build_bl_tree","max_blindex","l_desc","d_desc","bl_desc","send_all_trees","lcodes","dcodes","blcodes","rank","detect_data_type","block_mask","static_init_done","_tr_init","_tr_stored_block","stored_len","last","set","window","subarray","_tr_align","_tr_flush_block","opt_lenb","static_lenb","level","strm","data_type","strategy","_tr_tally","sym_end","module","exports"],"sources":["node_modules/pako/lib/zlib/trees.js"],"sourcesContent":["'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//const Z_FILTERED          = 1;\n//const Z_HUFFMAN_ONLY      = 2;\n//const Z_RLE               = 3;\nconst Z_FIXED               = 4;\n//const Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nconst Z_BINARY              = 0;\nconst Z_TEXT                = 1;\n//const Z_ASCII             = 1; // = Z_TEXT\nconst Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nconst STORED_BLOCK = 0;\nconst STATIC_TREES = 1;\nconst DYN_TREES    = 2;\n/* The three kinds of block type */\n\nconst MIN_MATCH    = 3;\nconst MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nconst LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nconst LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nconst L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nconst D_CODES       = 30;\n/* number of distance codes */\n\nconst BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nconst HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\n\nconst MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nconst MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nconst END_BLOCK   = 256;\n/* end of block literal code */\n\nconst REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nconst REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nconst REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nconst extra_lbits =   /* extra bits for each length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);\n\nconst extra_dbits =   /* extra bits for each distance code */\n  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);\n\nconst extra_blbits =  /* extra bits for each bit length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);\n\nconst bl_order =\n  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nconst DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nconst static_ltree  = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nconst static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nconst _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nconst _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nconst base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nconst base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nlet static_l_desc;\nlet static_d_desc;\nlet static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nconst d_code = (dist) => {\n\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n};\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nconst put_short = (s, w) => {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n};\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nconst send_bits = (s, value, length) => {\n\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n};\n\n\nconst send_code = (s, c, tree) => {\n\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n};\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nconst bi_reverse = (code, len) => {\n\n  let res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nconst bi_flush = (s) => {\n\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n};\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nconst gen_bitlen = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n\n  const tree            = desc.dyn_tree;\n  const max_code        = desc.max_code;\n  const stree           = desc.stat_desc.static_tree;\n  const has_stree       = desc.stat_desc.has_stree;\n  const extra           = desc.stat_desc.extra_bits;\n  const base            = desc.stat_desc.extra_base;\n  const max_length      = desc.stat_desc.max_length;\n  let h;              /* heap index */\n  let n, m;           /* iterate over the tree elements */\n  let bits;           /* bit length */\n  let xbits;          /* extra bits */\n  let f;              /* frequency */\n  let overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Tracev((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Tracev((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nconst gen_codes = (tree, max_code, bl_count) => {\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n\n  const next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\n  let code = 0;              /* running code value */\n  let bits;                  /* bit index */\n  let n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    code = (code + bl_count[bits - 1]) << 1;\n    next_code[bits] = code;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    let len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n};\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nconst tr_static_init = () => {\n\n  let n;        /* iterates over tree elements */\n  let bits;     /* bit counter */\n  let length;   /* length value */\n  let code;     /* code value */\n  let dist;     /* distance index */\n  const bl_count = new Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n};\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nconst init_block = (s) => {\n\n  let n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.sym_next = s.matches = 0;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nconst bi_windup = (s) =>\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n};\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nconst smaller = (tree, n, m, depth) => {\n\n  const _n2 = n * 2;\n  const _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n};\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nconst pqdownheap = (s, tree, k) => {\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n\n  const v = s.heap[k];\n  let j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n};\n\n\n// inlined manually\n// const SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nconst compress_block = (s, ltree, dtree) => {\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n\n  let dist;           /* distance of matched string */\n  let lc;             /* match length or unmatched char (if dist == 0) */\n  let sx = 0;         /* running index in sym_buf */\n  let code;           /* the code to send */\n  let extra;          /* number of extra bits to send */\n\n  if (s.sym_next !== 0) {\n    do {\n      dist = s.pending_buf[s.sym_buf + sx++] & 0xff;\n      dist += (s.pending_buf[s.sym_buf + sx++] & 0xff) << 8;\n      lc = s.pending_buf[s.sym_buf + sx++];\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and sym_buf is ok: */\n      //Assert(s->pending < s->lit_bufsize + sx, \"pendingBuf overflow\");\n\n    } while (sx < s.sym_next);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n};\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nconst build_tree = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n\n  const tree     = desc.dyn_tree;\n  const stree    = desc.stat_desc.static_tree;\n  const has_stree = desc.stat_desc.has_stree;\n  const elems    = desc.stat_desc.elems;\n  let n, m;          /* iterate over heap elements */\n  let max_code = -1; /* largest code with non zero frequency */\n  let node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n};\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nconst scan_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nconst send_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nconst build_bl_tree = (s) => {\n\n  let max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n};\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nconst send_all_trees = (s, lcodes, dcodes, blcodes) => {\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n\n  let rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n};\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"block list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"allow list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nconst detect_data_type = (s) => {\n  /* block_mask is the bit mask of block-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  let block_mask = 0xf3ffc07f;\n  let n;\n\n  /* Check for non-textual (\"block-listed\") bytes. */\n  for (n = 0; n <= 31; n++, block_mask >>>= 1) {\n    if ((block_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"allow-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"block-listed\" or \"allow-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n};\n\n\nlet static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nconst _tr_init = (s) =>\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n};\n\n\n/* ===========================================================================\n * Send a stored block\n */\nconst _tr_stored_block = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  bi_windup(s);        /* align on byte boundary */\n  put_short(s, stored_len);\n  put_short(s, ~stored_len);\n  if (stored_len) {\n    s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);\n  }\n  s.pending += stored_len;\n};\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nconst _tr_align = (s) => {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n};\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and write out the encoded block.\n */\nconst _tr_flush_block = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  let max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->sym_next / 3));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n};\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nconst _tr_tally = (s, dist, lc) => {\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist;\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;\n  s.pending_buf[s.sym_buf + s.sym_next++] = lc;\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n  return (s.sym_next === s.sym_end);\n};\n\nmodule.exports._tr_init  = _tr_init;\nmodule.exports._tr_stored_block = _tr_stored_block;\nmodule.exports._tr_flush_block  = _tr_flush_block;\nmodule.exports._tr_tally = _tr_tally;\nmodule.exports._tr_align = _tr_align;\n"],"mappings":"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","ignoreList":[]}