"use strict";const Z_FIXED=4,Z_BINARY=0,Z_TEXT=1,Z_UNKNOWN=2;function zero(e){let t=e.length;for(;--t>=0;)e[t]=0}const STORED_BLOCK=0,STATIC_TREES=1,DYN_TREES=2,MIN_MATCH=3,MAX_MATCH=258,LENGTH_CODES=29,LITERALS=256,L_CODES=286,D_CODES=30,BL_CODES=19,HEAP_SIZE=573,MAX_BITS=15,Buf_size=16,MAX_BL_BITS=7,END_BLOCK=256,REP_3_6=16,REPZ_3_10=17,REPZ_11_138=18,extra_lbits=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),extra_dbits=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),extra_blbits=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),bl_order=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),DIST_CODE_LEN=512,static_ltree=new Array(576);zero(static_ltree);const static_dtree=new Array(60);zero(static_dtree);const _dist_code=new Array(512);zero(_dist_code);const _length_code=new Array(256);zero(_length_code);const base_length=new Array(29);zero(base_length);const base_dist=new Array(30);function StaticTreeDesc(e,t,_,s,d){this.static_tree=e,this.extra_bits=t,this.extra_base=_,this.elems=s,this.max_length=d,this.has_stree=e&&e.length}let static_l_desc,static_d_desc,static_bl_desc;function TreeDesc(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}zero(base_dist);const d_code=e=>e<256?_dist_code[e]:_dist_code[256+(e>>>7)],put_short=(e,t)=>{e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255},send_bits=(e,t,_)=>{e.bi_valid>16-_?(e.bi_buf|=t<<e.bi_valid&65535,put_short(e,e.bi_buf),e.bi_buf=t>>16-e.bi_valid,e.bi_valid+=_-16):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=_)},send_code=(e,t,_)=>{send_bits(e,_[2*t],_[2*t+1])},bi_reverse=(e,t)=>{let _=0;do{_|=1&e,e>>>=1,_<<=1}while(--t>0);return _>>>1},bi_flush=e=>{16===e.bi_valid?(put_short(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)},gen_bitlen=(e,t)=>{const _=t.dyn_tree,s=t.max_code,d=t.stat_desc.static_tree,r=t.stat_desc.has_stree,n=t.stat_desc.extra_bits,i=t.stat_desc.extra_base,l=t.stat_desc.max_length;let a,c,o,b,p,h,f=0;for(b=0;b<=15;b++)e.bl_count[b]=0;for(_[2*e.heap[e.heap_max]+1]=0,a=e.heap_max+1;a<573;a++)c=e.heap[a],b=_[2*_[2*c+1]+1]+1,b>l&&(b=l,f++),_[2*c+1]=b,c>s||(e.bl_count[b]++,p=0,c>=i&&(p=n[c-i]),h=_[2*c],e.opt_len+=h*(b+p),r&&(e.static_len+=h*(d[2*c+1]+p)));if(0!==f){do{for(b=l-1;0===e.bl_count[b];)b--;e.bl_count[b]--,e.bl_count[b+1]+=2,e.bl_count[l]--,f-=2}while(f>0);for(b=l;0!==b;b--)for(c=e.bl_count[b];0!==c;)o=e.heap[--a],o>s||(_[2*o+1]!==b&&(e.opt_len+=(b-_[2*o+1])*_[2*o],_[2*o+1]=b),c--)}},gen_codes=(e,t,_)=>{const s=new Array(16);let d,r,n=0;for(d=1;d<=15;d++)n=n+_[d-1]<<1,s[d]=n;for(r=0;r<=t;r++){let t=e[2*r+1];0!==t&&(e[2*r]=bi_reverse(s[t]++,t))}},tr_static_init=()=>{let e,t,_,s,d;const r=new Array(16);for(_=0,s=0;s<28;s++)for(base_length[s]=_,e=0;e<1<<extra_lbits[s];e++)_length_code[_++]=s;for(_length_code[_-1]=s,d=0,s=0;s<16;s++)for(base_dist[s]=d,e=0;e<1<<extra_dbits[s];e++)_dist_code[d++]=s;for(d>>=7;s<30;s++)for(base_dist[s]=d<<7,e=0;e<1<<extra_dbits[s]-7;e++)_dist_code[256+d++]=s;for(t=0;t<=15;t++)r[t]=0;for(e=0;e<=143;)static_ltree[2*e+1]=8,e++,r[8]++;for(;e<=255;)static_ltree[2*e+1]=9,e++,r[9]++;for(;e<=279;)static_ltree[2*e+1]=7,e++,r[7]++;for(;e<=287;)static_ltree[2*e+1]=8,e++,r[8]++;for(gen_codes(static_ltree,287,r),e=0;e<30;e++)static_dtree[2*e+1]=5,static_dtree[2*e]=bi_reverse(e,5);static_l_desc=new StaticTreeDesc(static_ltree,extra_lbits,257,286,15),static_d_desc=new StaticTreeDesc(static_dtree,extra_dbits,0,30,15),static_bl_desc=new StaticTreeDesc(new Array(0),extra_blbits,0,19,7)},init_block=e=>{let t;for(t=0;t<286;t++)e.dyn_ltree[2*t]=0;for(t=0;t<30;t++)e.dyn_dtree[2*t]=0;for(t=0;t<19;t++)e.bl_tree[2*t]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.sym_next=e.matches=0},bi_windup=e=>{e.bi_valid>8?put_short(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0},smaller=(e,t,_,s)=>{const d=2*t,r=2*_;return e[d]<e[r]||e[d]===e[r]&&s[t]<=s[_]},pqdownheap=(e,t,_)=>{const s=e.heap[_];let d=_<<1;for(;d<=e.heap_len&&(d<e.heap_len&&smaller(t,e.heap[d+1],e.heap[d],e.depth)&&d++,!smaller(t,s,e.heap[d],e.depth));)e.heap[_]=e.heap[d],_=d,d<<=1;e.heap[_]=s},compress_block=(e,t,_)=>{let s,d,r,n,i=0;if(0!==e.sym_next)do{s=255&e.pending_buf[e.sym_buf+i++],s+=(255&e.pending_buf[e.sym_buf+i++])<<8,d=e.pending_buf[e.sym_buf+i++],0===s?send_code(e,d,t):(r=_length_code[d],send_code(e,r+256+1,t),n=extra_lbits[r],0!==n&&(d-=base_length[r],send_bits(e,d,n)),s--,r=d_code(s),send_code(e,r,_),n=extra_dbits[r],0!==n&&(s-=base_dist[r],send_bits(e,s,n)))}while(i<e.sym_next);send_code(e,256,t)},build_tree=(e,t)=>{const _=t.dyn_tree,s=t.stat_desc.static_tree,d=t.stat_desc.has_stree,r=t.stat_desc.elems;let n,i,l,a=-1;for(e.heap_len=0,e.heap_max=573,n=0;n<r;n++)0!==_[2*n]?(e.heap[++e.heap_len]=a=n,e.depth[n]=0):_[2*n+1]=0;for(;e.heap_len<2;)l=e.heap[++e.heap_len]=a<2?++a:0,_[2*l]=1,e.depth[l]=0,e.opt_len--,d&&(e.static_len-=s[2*l+1]);for(t.max_code=a,n=e.heap_len>>1;n>=1;n--)pqdownheap(e,_,n);l=r;do{n=e.heap[1],e.heap[1]=e.heap[e.heap_len--],pqdownheap(e,_,1),i=e.heap[1],e.heap[--e.heap_max]=n,e.heap[--e.heap_max]=i,_[2*l]=_[2*n]+_[2*i],e.depth[l]=(e.depth[n]>=e.depth[i]?e.depth[n]:e.depth[i])+1,_[2*n+1]=_[2*i+1]=l,e.heap[1]=l++,pqdownheap(e,_,1)}while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],gen_bitlen(e,t),gen_codes(_,a,e.bl_count)},scan_tree=(e,t,_)=>{let s,d,r=-1,n=t[1],i=0,l=7,a=4;for(0===n&&(l=138,a=3),t[2*(_+1)+1]=65535,s=0;s<=_;s++)d=n,n=t[2*(s+1)+1],++i<l&&d===n||(i<a?e.bl_tree[2*d]+=i:0!==d?(d!==r&&e.bl_tree[2*d]++,e.bl_tree[32]++):i<=10?e.bl_tree[34]++:e.bl_tree[36]++,i=0,r=d,0===n?(l=138,a=3):d===n?(l=6,a=3):(l=7,a=4))},send_tree=(e,t,_)=>{let s,d,r=-1,n=t[1],i=0,l=7,a=4;for(0===n&&(l=138,a=3),s=0;s<=_;s++)if(d=n,n=t[2*(s+1)+1],!(++i<l&&d===n)){if(i<a)do{send_code(e,d,e.bl_tree)}while(0!=--i);else 0!==d?(d!==r&&(send_code(e,d,e.bl_tree),i--),send_code(e,16,e.bl_tree),send_bits(e,i-3,2)):i<=10?(send_code(e,17,e.bl_tree),send_bits(e,i-3,3)):(send_code(e,18,e.bl_tree),send_bits(e,i-11,7));i=0,r=d,0===n?(l=138,a=3):d===n?(l=6,a=3):(l=7,a=4)}},build_bl_tree=e=>{let t;for(scan_tree(e,e.dyn_ltree,e.l_desc.max_code),scan_tree(e,e.dyn_dtree,e.d_desc.max_code),build_tree(e,e.bl_desc),t=18;t>=3&&0===e.bl_tree[2*bl_order[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t},send_all_trees=(e,t,_,s)=>{let d;for(send_bits(e,t-257,5),send_bits(e,_-1,5),send_bits(e,s-4,4),d=0;d<s;d++)send_bits(e,e.bl_tree[2*bl_order[d]+1],3);send_tree(e,e.dyn_ltree,t-1),send_tree(e,e.dyn_dtree,_-1)},detect_data_type=e=>{let t,_=4093624447;for(t=0;t<=31;t++,_>>>=1)if(1&_&&0!==e.dyn_ltree[2*t])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(t=32;t<256;t++)if(0!==e.dyn_ltree[2*t])return 1;return 0};let static_init_done=!1;const _tr_init=e=>{static_init_done||(tr_static_init(),static_init_done=!0),e.l_desc=new TreeDesc(e.dyn_ltree,static_l_desc),e.d_desc=new TreeDesc(e.dyn_dtree,static_d_desc),e.bl_desc=new TreeDesc(e.bl_tree,static_bl_desc),e.bi_buf=0,e.bi_valid=0,init_block(e)},_tr_stored_block=(e,t,_,s)=>{send_bits(e,0+(s?1:0),3),bi_windup(e),put_short(e,_),put_short(e,~_),_&&e.pending_buf.set(e.window.subarray(t,t+_),e.pending),e.pending+=_},_tr_align=e=>{send_bits(e,2,3),send_code(e,256,static_ltree),bi_flush(e)},_tr_flush_block=(e,t,_,s)=>{let d,r,n=0;e.level>0?(2===e.strm.data_type&&(e.strm.data_type=detect_data_type(e)),build_tree(e,e.l_desc),build_tree(e,e.d_desc),n=build_bl_tree(e),d=e.opt_len+3+7>>>3,r=e.static_len+3+7>>>3,r<=d&&(d=r)):d=r=_+5,_+4<=d&&-1!==t?_tr_stored_block(e,t,_,s):4===e.strategy||r===d?(send_bits(e,2+(s?1:0),3),compress_block(e,static_ltree,static_dtree)):(send_bits(e,4+(s?1:0),3),send_all_trees(e,e.l_desc.max_code+1,e.d_desc.max_code+1,n+1),compress_block(e,e.dyn_ltree,e.dyn_dtree)),init_block(e),s&&bi_windup(e)},_tr_tally=(e,t,_)=>(e.pending_buf[e.sym_buf+e.sym_next++]=t,e.pending_buf[e.sym_buf+e.sym_next++]=t>>8,e.pending_buf[e.sym_buf+e.sym_next++]=_,0===t?e.dyn_ltree[2*_]++:(e.matches++,t--,e.dyn_ltree[2*(_length_code[_]+256+1)]++,e.dyn_dtree[2*d_code(t)]++),e.sym_next===e.sym_end);module.exports._tr_init=_tr_init,module.exports._tr_stored_block=_tr_stored_block,module.exports._tr_flush_block=_tr_flush_block,module.exports._tr_tally=_tr_tally,module.exports._tr_align=_tr_align;
//# sourceMappingURL=trees.js.map