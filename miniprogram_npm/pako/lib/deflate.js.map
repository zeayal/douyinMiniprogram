{"version":3,"file":"node_modules/pako/lib/deflate.js","names":["zlib_deflate","require","utils","strings","msg","ZStream","toString","Object","prototype","Z_NO_FLUSH","Z_SYNC_FLUSH","Z_FULL_FLUSH","Z_FINISH","Z_OK","Z_STREAM_END","Z_DEFAULT_COMPRESSION","Z_DEFAULT_STRATEGY","Z_DEFLATED","Deflate","options","this","assign","level","method","chunkSize","windowBits","memLevel","strategy","opt","raw","gzip","err","ended","chunks","strm","avail_out","status","deflateInit2","Error","header","deflateSetHeader","dictionary","dict","string2buf","call","Uint8Array","deflateSetDictionary","_dict_set","deflate","input","deflator","push","result","deflateRaw","data","flush_mode","_flush_mode","next_in","avail_in","length","output","next_out","onData","subarray","deflateEnd","onEnd","chunk","flattenChunks","module","exports","constants"],"sources":["node_modules/pako/lib/deflate.js"],"sourcesContent":["'use strict';\n\n\nconst zlib_deflate = require('./zlib/deflate');\nconst utils        = require('./utils/common');\nconst strings      = require('./utils/strings');\nconst msg          = require('./zlib/messages');\nconst ZStream      = require('./zlib/zstream');\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END,\n  Z_DEFAULT_COMPRESSION,\n  Z_DEFAULT_STRATEGY,\n  Z_DEFLATED\n} = require('./zlib/constants');\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate(options) {\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY\n  }, options || {});\n\n  let opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n\n  let status = zlib_deflate.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    let dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK) {\n      throw new Error(msg[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must\n * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending\n * buffers and call [[Deflate#onEnd]].\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  let status, _flush_mode;\n\n  if (this.ended) { return false; }\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    // Make sure avail_out > 6 to avoid repeating markers\n    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    status = zlib_deflate.deflate(strm, _flush_mode);\n\n    // Ended => flush and finish\n    if (status === Z_STREAM_END) {\n      if (strm.next_out > 0) {\n        this.onData(strm.output.subarray(0, strm.next_out));\n      }\n      status = zlib_deflate.deflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return status === Z_OK;\n    }\n\n    // Flush if out buffer full\n    if (strm.avail_out === 0) {\n      this.onData(strm.output);\n      continue;\n    }\n\n    // Flush if requested and has data\n    if (_flush_mode > 0 && strm.next_out > 0) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array): output data.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    this.result = utils.flattenChunks(this.chunks);\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n  const deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\n\n\nmodule.exports.Deflate = Deflate;\nmodule.exports.deflate = deflate;\nmodule.exports.deflateRaw = deflateRaw;\nmodule.exports.gzip = gzip;\nmodule.exports.constants = require('./zlib/constants');\n"],"mappings":"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","ignoreList":[]}