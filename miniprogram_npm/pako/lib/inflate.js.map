{"version":3,"file":"node_modules/pako/lib/inflate.js","names":["zlib_inflate","require","utils","strings","msg","ZStream","GZheader","toString","Object","prototype","Z_NO_FLUSH","Z_FINISH","Z_OK","Z_STREAM_END","Z_NEED_DICT","Z_STREAM_ERROR","Z_DATA_ERROR","Z_MEM_ERROR","Inflate","options","this","assign","chunkSize","windowBits","to","opt","raw","err","ended","chunks","strm","avail_out","status","inflateInit2","Error","header","inflateGetHeader","dictionary","string2buf","call","Uint8Array","inflateSetDictionary","inflate","input","inflator","push","result","inflateRaw","data","flush_mode","_flush_mode","last_avail_out","next_in","avail_in","length","output","next_out","state","wrap","inflateReset","onEnd","next_out_utf8","utf8border","tail","utf8str","buf2string","set","subarray","onData","inflateEnd","chunk","join","flattenChunks","module","exports","ungzip","constants"],"sources":["node_modules/pako/lib/inflate.js"],"sourcesContent":["'use strict';\n\n\nconst zlib_inflate = require('./zlib/inflate');\nconst utils        = require('./utils/common');\nconst strings      = require('./utils/strings');\nconst msg          = require('./zlib/messages');\nconst ZStream      = require('./zlib/zstream');\nconst GZheader     = require('./zlib/gzheader');\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR\n} = require('./zlib/constants');\n\n/* ===========================================================================*/\n\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n  this.options = utils.assign({\n    chunkSize: 1024 * 64,\n    windowBits: 15,\n    to: ''\n  }, options || {});\n\n  const opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new ZStream();\n  this.strm.avail_out = 0;\n\n  let status  = zlib_inflate.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new GZheader();\n\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== Z_OK) {\n        throw new Error(msg[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer): input data\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE\n *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,\n *   `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. If end of stream detected,\n * [[Inflate#onEnd]] will be called.\n *\n * `flush_mode` is not needed for normal operation, because end of stream\n * detected automatically. You may try to use it for advanced things, but\n * this functionality was not tested.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  const dictionary = this.options.dictionary;\n  let status, _flush_mode, last_avail_out;\n\n  if (this.ended) return false;\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, _flush_mode);\n\n    if (status === Z_NEED_DICT && dictionary) {\n      status = zlib_inflate.inflateSetDictionary(strm, dictionary);\n\n      if (status === Z_OK) {\n        status = zlib_inflate.inflate(strm, _flush_mode);\n      } else if (status === Z_DATA_ERROR) {\n        // Replace code with more verbose\n        status = Z_NEED_DICT;\n      }\n    }\n\n    // Skip snyc markers if more data follows and not raw mode\n    while (strm.avail_in > 0 &&\n           status === Z_STREAM_END &&\n           strm.state.wrap > 0 &&\n           data[strm.next_in] !== 0)\n    {\n      zlib_inflate.inflateReset(strm);\n      status = zlib_inflate.inflate(strm, _flush_mode);\n    }\n\n    switch (status) {\n      case Z_STREAM_ERROR:\n      case Z_DATA_ERROR:\n      case Z_NEED_DICT:\n      case Z_MEM_ERROR:\n        this.onEnd(status);\n        this.ended = true;\n        return false;\n    }\n\n    // Remember real `avail_out` value, because we may patch out buffer content\n    // to align utf8 strings boundaries.\n    last_avail_out = strm.avail_out;\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === Z_STREAM_END) {\n\n        if (this.options.to === 'string') {\n\n          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          let tail = strm.next_out - next_out_utf8;\n          let utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail & realign counters\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n        }\n      }\n    }\n\n    // Must repeat iteration if out buffer is full\n    if (status === Z_OK && last_avail_out === 0) continue;\n\n    // Finalize if end of stream reached.\n    if (status === Z_STREAM_END) {\n      status = zlib_inflate.inflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return true;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|String): output data. When string output requested,\n *   each chunk will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako');\n * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));\n * let output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err) {\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  const inflator = new Inflate(options);\n\n  inflator.push(input);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) throw inflator.msg || msg[inflator.err];\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nmodule.exports.Inflate = Inflate;\nmodule.exports.inflate = inflate;\nmodule.exports.inflateRaw = inflateRaw;\nmodule.exports.ungzip = inflate;\nmodule.exports.constants = require('./zlib/constants');\n"],"mappings":"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","ignoreList":[]}